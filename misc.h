#ifndef MISC_H
#define MISC_H
#include <unordered_map>
#include <vector>
#include <string>

enum token_type {
  AND,
  ARRAY,
  ASM,
  BEGIN,
  BREAK,
  CASE,
  CONST,
  CONSTRUCTOR,
  CONTINUE,
  DESTRUCTOR,
  DIV,
  DO,
  DOWNTO,
  ELSE,
  END,
  FALSE,
  FILE_,
  FOR,
  FUNCTION,
  GOTO,
  IF,
  IMPLEMENTATION,
  IN,
  INLINE,
  INTERFACE,
  LABEL,
  MOD,
  NIL,
  NOT,
  OBJECT,
  OF,
  ON,
  OPERATOR,
  OR,
  PACKED,
  PROCEDURE,
  PROGRAM,
  RECORD,
  REPEAT,
  SET,
  SHL,
  SHR,
  STRING,
  THEN,
  TO,
  TRUE,
  TYPE,
  UNIT,
  UNTIL,
  USES,
  VAR,
  WHILE,
  WITH,
  XOR,
  INTEGER,
  REAL,
  IDENTIFIER,
  PLUSOP,
  MINUSOP,
  MULTOP,
  DIVOP,
  ASSIGN,
  COLON,
  EQUAL,
  NE,
  LTEQ,
  GTEQ,
  LT,
  GT,
  PLUSEQUAL,
  MINUSEQUAL,
  MULTEQUAL,
  DIVEQUAL,
  CARAT,
  SEMICOLON,
  COMMA,
  LPAREN,
  RPAREN,
  LBRACKET,
  RBRACKET,
  LBRACE,
  RBRACE,
  LCOMMENT,
  RCOMMENT,
};

std::vector<std::string> token_string{
    "AND",         "ARRAY",
    "ASM",         "BEGIN",
    "BREAK",       "CASE",
    "CONST",       "CONSTRUCTOR",
    "CONTINUE",    "DESTRUCTOR",
    "DIV",         "DO",
    "DOWNTO",      "ELSE",
    "END",         "FALSE",
    "FILE_",       "FOR",
    "FUNCTION",    "GOTO",
    "IF",          "IMPLEMENTATION",
    "IN",          "INLINE",
    "INTERFACE",   "LABEL",
    "MOD",         "NIL",
    "NOT",         "OBJECT",
    "OF",          "ON",
    "OPERATOR",    "OR",
    "PACKED",      "PROCEDURE",
    "PROGRAM",     "RECORD",
    "REPEAT",      "SET",
    "SHL",         "SHR",
    "STRING",      "THEN",
    "TO",          "TRUE",
    "TYPE",        "UNIT",
    "UNTIL",       "USES",
    "VAR",         "WHILE",
    "WITH",        "XOR",
    "INTEGER",     "REAL",
    "IDENTIFIER", "PLUSOP",
    "MINUSOP",     "MULTOP",
    "DIVOP",       "ASSIGN",
    "COLON",       "EQUAL",
    "NE",          "LTEQ",
    "GTEQ",        "LT",
    "GT",          "PLUSEQUAL",
    "MINUSEQUAL",  "MULTEQUAL",
    "DIVEQUAL",    "CARAT",
    "SEMICOLON",   "COMMA",
    "LPAREN",      "RPAREN",
    "LBRACKET",    "RBRACKET",
    "LBRACE",      "RBRACE",
    "LCOMMENT",    "RCOMMENT",
};

std::unordered_map<std::string, token_type> keywords{
    {"AND", AND},
    {"ARRAY", ARRAY},
    {"ASM", ASM},
    {"BEGIN", BEGIN},
    {"BREAK", BREAK},
    {"CASE", CASE},
    {"CONST", CONST},
    {"CONSTRUCTOR", CONSTRUCTOR},
    {"CONTINUE", CONTINUE},
    {"DESTRUCTOR", DESTRUCTOR},
    {"DIV", DIV},
    {"DO", DO},
    {"DOWNTO", DOWNTO},
    {"ELSE", ELSE},
    {"END", END},
    {"FALSE", FALSE},
    {"FILE", FILE_},
    {"FOR", FOR},
    {"FUNCTION", FUNCTION},
    {"GOTO", GOTO},
    {"IF", IF},
    {"IMPLEMENTATION", IMPLEMENTATION},
    {"IN", IN},
    {"INLINE", INLINE},
    {"INTERFACE", INTERFACE},
    {"LABEL", LABEL},
    {"MOD", MOD},
    {"NIL", NIL},
    {"NOT", NOT},
    {"OBJECT", OBJECT},
    {"OF", OF},
    {"ON", ON},
    {"OPERATOR", OPERATOR},
    {"OR", OR},
    {"PACKED", PACKED},
    {"PROCEDURE", PROCEDURE},
    {"PROGRAM", PROGRAM},
    {"RECORD", RECORD},
    {"REPEAT", REPEAT},
    {"SET", SET},
    {"SHL", SHL},
    {"SHR", SHR},
    {"STRING", STRING},
    {"THEN", THEN},
    {"TO", TO},
    {"TRUE", TRUE},
    {"TYPE", TYPE},
    {"UNIT", UNIT},
    {"UNTIL", UNTIL},
    {"USES", USES},
    {"VAR", VAR},
    {"WHILE", WHILE},
    {"WITH", WITH},
    {"XOR", XOR},
    {"INTEGER", INTEGER},
    {"REAL", REAL},
    {"IDENTIFIER", IDENTIFIER},
    {"PLUSOP", PLUSOP},
    {"MINUSOP", MINUSOP},
    {"MULTOP", MULTOP},
    {"DIVOP", DIVOP},
    {"ASSIGN", ASSIGN},
    {"EQUAL", EQUAL},
    {"NE", NE},
    {"LTEQ", LTEQ},
    {"GTEQ", GTEQ},
    {"LT", LT},
    {"GT", GT},
    {"PLUSEQUAL", PLUSEQUAL},
    {"MINUSEQUAL", MINUSEQUAL},
    {"MULTEQUAL", MULTEQUAL},
    {"DIVEQUAL", DIVEQUAL},
    {"CARAT", CARAT},
    {"SEMICOLON", SEMICOLON},
    {"COMMA", COMMA},
    {"LPAREN", LPAREN},
    {"RPAREN", RPAREN},
    {"LBRACKET", LBRACKET},
    {"RBRACKET", RBRACKET},
    {"LBRACE", LBRACE},
    {"RBRACE", RBRACE},
    {"LCOMMENT", LCOMMENT},
    {"RCOMMENT", RCOMMENT},
};



#endif /* MISC_H */
